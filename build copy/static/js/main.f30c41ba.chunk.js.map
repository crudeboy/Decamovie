{"version":3,"sources":["GlobalStyle.js","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","API.js","images/no_image.jpg","helpers.js","hooks/useHomeFetchMovies.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","components/Header/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","App.js","index.js"],"names":["GlobalStyle","createGlobalStyle","Wrapper","styled","div","Content","Head","TMDBLogoImg","img","Header","src","TMDBLogo","alt","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","defaultConfig","method","headers","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","movieId","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","currentState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_Pages","total_results","props","image","Text","HeroImage","prop","title","text","Grid","header","children","Image","Thumb","clickable","to","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","Home","loading","setLoading","Error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","setItem","useHomeFetchMovies","console","log","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","total_pages","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","error","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f30c41ba.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --maxWidth: 1280px; \n    --white: #fff;\n    --lightGrey: #eee;\n    --medGrey: #353535; \n    --darkGrey: #1c1c1c;\n    --fontSuperBig: 2.5rem;\n    --fontBig: 1.5rem;\n    --fontMed: 1.2rem;\n    --fontSmall: 1rem;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Abel', sans-serif;  \n  }\n\n  body {  \n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n\n    h1 {\n      font-size: 2rem;\n      font-weight: 600;\n      color: var(--white);\n      letter-spacing : 1.5px\n    }\n\n    h3 {\n      font-size: 1.1rem;\n      font-weight: 600;\n    }\n\n    p {\n      font-size: 1rem;\n      color: var(--white);\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: #0C6980;\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  max-width: var(--maxWidth);\n  padding: 20px 0;\n  margin: 0 auto;\n`;\n\nexport const Head = styled.div`\n  width: 200px;\n\n  @media screen and (max-width: 500px) {\n    width: 150px;\n  }\n`;\n\nexport const TMDBLogoImg = styled.img`\n  width: 100px;\n\n  @media screen and (max-width: 500px) {\n    width: 80px;\n  }\n`;\n","import React from 'react'\n  import TMDBLogo from '../../images/tmdb_logo.svg'\n  import { Wrapper, Content, Head, TMDBLogoImg } from './Header.styles'\n  \nconst Header =()=>(\n    <Wrapper>\n        <Content>\n           <Head><h1>DECAmovies</h1></Head>\n           <TMDBLogoImg src={TMDBLogo} alt =\"Tmdb-logo\"/>\n        </Content>\n    </Wrapper>\n)\n\nexport default Header\n\n","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n};\n\nexport default {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async (movieId) => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async (movieId) => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken,\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData),\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken }),\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n};\n","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\nexport const currentState = stateName => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n};","import { current } from 'immer'\nimport react, { useEffect, useState } from 'react'\nimport API from '../API'\nimport { currentState } from '../helpers'\n\nconst initialState = {\n  page: 0,\n  results: [],\n  total_Pages: 0,\n  total_results: 0\n\n}\n\nexport const useHomeFetchMovies = () => {\n  const [searchTerm, setSearchTerm] = useState('')\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [Error, setError] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = \" \") => {\n    try {\n      setError(false)\n      setLoading(true)\n      const movies = await API.fetchMovies(searchTerm, page);\n\n      setState(prev => ({\n        ...movies,\n        results:\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n\n      }))\n    } catch (error) {\n      setError(false)\n    }\n    //to set loading to false after grabbing the movies\n    setLoading(false)\n  }\n\n  useEffect(() => {\n\n    if (!searchTerm){\n      const sessionState = currentState('HomeState')\n    if(sessionState){\n        setState(sessionState)\n        return;\n      }\n    }\n    setState(initialState)\n    fetchMovies(1, searchTerm)\n  }, [searchTerm]) //initial dependency\n\n  //loading more thumbnails\n  useEffect(() => {\n    if (!isLoadingMore) return\n    fetchMovies(state.page + 1, searchTerm)\n    setIsLoadingMore(false)\n  }, [isLoadingMore, searchTerm, state.page])\n\n  //write to localstorage \nuseEffect(() => {\n  if (!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state));\n}, [searchTerm, state]);\n\n  return { state, loading, Error, searchTerm, setSearchTerm, setIsLoadingMore }\n}\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: ${(props) =>\n    `linear-gradient(\n      to bottom, rgba(0,0,0,0)\n      39%,rgba(0,0,0,0)\n      41%,rgba(0,0,0,0.65)\n      100%\n    ),\n    url('${props.image}'), var(--darkGrey)`};\n  background-size: 100%, cover;\n  background-position: center;\n  height: 600px;\n  position: relative;\n  animation: animateHeroimage 1s;\n\n  @keyframes animateHeroimage {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  padding: 20px;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n  z-index: 100;\n  max-width: 700px;\n  position: absolute;\n  bottom: 40px;\n  margin-right: 20px;\n  min-height: 100px;\n  color: var(--white);\n\n  h1 {\n    font-size: var(--fontSuperBig);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n\n  p {\n    font-size: var(--fontMed);\n  \n    @media screen and (max-width: 720px) {\n      font-size: var(--fontSmall);\n    }\n  }\n\n  @media screen and (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Wrapper, Content, Text } from './HeroImage.styles'\nconst HeroImage = (prop) => (\n    <Wrapper image={prop.image}>\n        <Content>\n            <Text>\n                <h1>{prop.title}</h1>\n                <p>{prop.text}</p>\n            </Text>\n        </Content>\n    </Wrapper>\n)\nHeroImage.propTypes = {\n    image: PropTypes.string,\n    title: PropTypes.string,\n    text: PropTypes.string\n};\n\nexport default HeroImage;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  padding: 0 20px;\n\n  h1 {\n    color: var(--medGrey);\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 2rem;\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Wrapper, Content } from './Grid.styles'\n\nconst Grid = (props) => (\n  <Wrapper>\n    <h1>{props.header}</h1>\n    <Content>{props.children}</Content>\n  </Wrapper>\n)\nGrid.propTypes = {\n  header: PropTypes.string\n};\n\nexport default Grid\n\n","import styled from 'styled-components';\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  max-width: 720px;\n  transition: all 0.3s;\n  object-fit: cover;\n  border-radius: 20px;\n  animation: animateMovieThumb 0.5s;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  @keyframes animateMovieThumb {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Image} from './Thumb.styles'\nimport { Link } from 'react-router-dom'\n\nconst Thumb =({image, movieId, clickable})=>(\n   <div>\n       {clickable? (\n           <Link to = {`/${movieId}`}>\n            <Image src ={image} alt =\"movie-thumbnails\"/>\n            </Link> \n       ): (\n        <Image src ={image} alt =\"movie-thumbnails\"/>\n       )\n       } \n   </div>\n);\nThumb.propTypes = {\n    image: PropTypes.string,\n    movieId: PropTypes.number,\n    clickable: PropTypes.bool\n  };\n\nexport default Thumb","import React from 'react'\nimport { Spinner } from './Spinner.styles'\nexport default Spinner","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  border: 5px solid var(--lightGrey); \n  border-top: 5px solid var(--medGrey);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 0.8s linear infinite;\n  margin: 20px auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  position: relative;\n  max-width: var(--maxWidth);\n  width: 100%;\n  height: 55px;\n  background: var(--medGrey);\n  margin: 0 auto;\n  border-radius: 40px;\n  color: var(--white);\n\n  img {\n    position: absolute;\n    left: 15px;\n    top: 14px;\n    width: 30px;\n  }\n\n  input {\n    font-size: 28px;\n    position: absolute;\n    left: 0px;\n    margin: 8px 0;\n    padding: 0 0 0 60px;\n    border: 0;\n    width: 95%;\n    background: transparent;\n    height: 40px;\n    color: var(--white);\n\n    :focus {\n      outline: none;\n    }\n\n    @media screen and (max-width: 720px) {\n      font-size: 28px;\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport react, { useState, useEffect, useRef } from 'react'\n//image icon to be used in the search bar\nimport searchIcon from '../../images/search-icon.svg'\nimport { Wrapper, Content } from './SearchBar.styles'\n\nconst SearchBar = ({ setSearchTerm }) => {\n  const [state, setState] = useState('');\n  const initial = useRef(true);\n\n  useEffect(() => {\n    if (initial.current) {\n      initial.current = false;\n      return;\n    }\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [setSearchTerm, state]);\n\n  return (\n    <Wrapper>\n      <Content>\n        <img src={searchIcon} alt='search-icon' />\n        <input\n          type='text'\n          placeholder='Search all our available movies'\n          onChange={event => setState(event.currentTarget.value)}\n          value={state}\n        />\n      </Content>\n    </Wrapper>\n  );\n};\n\nSearchBar.propTypes = {\n  callback: PropTypes.func\n};\nexport default SearchBar;","\nimport styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n  display: block;\n  background: var(--darkGrey);\n  width: 25%;\n  min-width: 200px;\n  height: 60px;\n  border-radius: 30px;\n  color: var(--white);\n  border: 0;\n  font-size: var(--fontBig);\n  margin: 20px auto;\n  transition: all 0.3s;\n  outline: none;\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Wrapper } from './Button.styles'\n\nconst Button = ({ text, callback }) => (\n  <Wrapper type='button' onClick={callback}>\n    {text}\n  </Wrapper>\n);\nButton.propTypes = {\n  text: PropTypes.string,\n  callback: PropTypes.func\n};\n\nexport default Button;","import react from 'react'\nimport API from '../../API'\n//config settings\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../../config'\n//Image fall back to images incase there are no images on the database\nimport NoImage from '../../images/no_image.jpg'\n\nimport { useHomeFetchMovies } from '../../hooks/useHomeFetchMovies'\nimport HeroImage from '../HeroImage'\nimport Grid from '../Grid'\nimport Thumb from '../Thumb'\nimport Spinner from '../Spinner'\nimport SearchBar from '../SearchBar'\nimport Button from '../Button'\n\nconst Home = () => {\n  const { state, loading, Error, searchTerm, setSearchTerm, setIsLoadingMore } = useHomeFetchMovies()\n  console.log(state)\n  if (Error) return <div> Something went Wrong</div>;\n  return (\n    <div>\n      {state.results[0] ? (\n        <HeroImage\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n          title={state.results[0].original_title}\n          text={state.results[0].overview}\n        />\n      ) : null}\n      <SearchBar setSearchTerm={setSearchTerm} />\n      <Grid header={searchTerm ? 'Search results' : 'Popular movies'}>\n        {state.results.map(movie => (\n          <Thumb\n            key={movie.id}\n            clickable //always default to true\n            image={\n              movie.poster_path ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path : NoImage\n            }\n            movieId={movie.id}\n          />\n        ))}\n      </Grid>\n      {loading && <Spinner />}\n      {state.page < state.total_pages && !loading && (\n        <Button text='Show More' callback={() => setIsLoadingMore(true)} />\n      )}\n    </div>\n  );\n};\n\nexport default Home\n\n\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 70px;\n  background: var(--medGrey);\n  color: var(--white);\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  width: 100%;\n  max-width: var(--maxWidth);\n  padding: 0 20px;\n\n  span {\n    font-size: 1.2rem;\n    color: var(--white);\n    padding-right: 10px;\n\n    @media screen and (max-width: 768px) {\n      font-size: 16px;\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { Wrapper, Content } from './BreadCrumb.styles'\nimport { Link } from 'react-router-dom'\n\nconst BreadCrumb = ({ movieTitle }) => (\n  <Wrapper>\n    <Content>\n      <Link to='/'>\n        <span>Home</span>\n      </Link>\n      <span>|</span>\n      <span>{movieTitle}</span>\n    </Content>\n  </Wrapper>\n);\n\nBreadCrumb.propTypes = {\n  movieTitle: PropTypes.string\n};\nexport default BreadCrumb;","import styled from 'styled-components';\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n\nexport const Wrapper = styled.div`\n  background: ${(props) =>\n    props.backdrop\n      ? `url('${IMAGE_BASE_URL}${BACKDROP_SIZE}${props.backdrop}')`\n      : '#000'};\n  background-size: cover;\n  background-position: center;\n  padding: 40px 20px;\n  animation: animateMovieinfo 1s;\n\n  @keyframes animateMovieinfo {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: 1280px;\n\n  margin: 0 auto;\n  background: rgb(0, 0, 0, 0.7);\n  border-radius: 20px;\n\n  @media screen and (max-width: 768px) {\n    display: block;\n    max-height: none;\n  }\n`;\n\nexport const Text = styled.div`\n  width: 100%;\n  padding: 20px 40px;\n  color: var(--white);\n  overflow: hidden;\n\n  .rating-director {\n    display: flex;\n    justify-content: flex-start;\n  }\n\n  .score {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 35px;\n    height: 35px;\n    background: #fff;\n    color: #000;\n    font-weight: 800;\n    border-radius: 25px;\n    margin: 0px 0 0 0;\n  }\n\n  .director {\n    margin: 0 0 0 40px;\n\n    p {\n      margin: 0;\n    }\n  }\n\n  h1 {\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport Thumb from '../Thumb';\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\nimport NoImage from '../../images/no_image.jpg';\nimport { Wrapper, Content, Text } from './MovieInfo.styles'\nimport Movie from '../Movie';\n\nconst MovieInfo = ({ movie }) => (\n    <Wrapper backdrop={movie.backdrop_path}>\n        <Content>\n            <Thumb\n                image={\n                    movie.poster_path\n                        ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n                        : NoImage\n                }\n                clickable={false}\n            />\n            <Text>\n                <h1>{movie.title}</h1>\n                <h3>PLOT</h3>\n                <p>{movie.overview}</p>\n\n                <div className=\"rating-directors\">\n                    <div>\n                        <h3>RATING</h3>\n                        <div className=\"score\">{movie.vote_average}</div>\n                    </div>\n                    <div className=\"director\">\n                        <h3>DIRECTOR {movie.directors.length > 1 ? 'S' : ''}</h3>\n                        {movie.directors.map(director => (\n                            <p key={director.credit_id}>{director.name}</p>\n                        ))}\n                    </div>\n                </div>\n            </Text>\n        </Content>\n    </Wrapper>\n);\nMovieInfo.propTypes = {\n    movie: PropTypes.object\n};\n\nexport default MovieInfo;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  min-height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  max-width: var(--maxWidth);\n  width: 100%;\n  margin: 0 auto;\n\n  .column {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    background: var(--medGrey);\n    border-radius: 20px;\n    margin: 0 20px;\n    flex: 1;\n\n    :first-child {\n      margin-left: 0;\n    }\n\n    :last-child {\n      margin-right: 0;\n    }\n  }\n\n  @media screen and (max-width: 768px) {\n    display: block;\n\n    .column {\n      margin: 20px 0;\n    }\n  }\n`;\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport { calcTime, convertMoney } from '../../helpers'\nimport { Wrapper, Content } from './MovieInfoBar.styles'\n\nconst MovieInfoBar = ({ time, budget, revenue }) => (\n  <Wrapper>\n    <Content>\n      <div className='column'>\n        <p>Running time : {calcTime(time)}</p>\n      </div>\n      <div className='column'>\n        <p>Budget: {convertMoney(budget)}</p>\n      </div>\n      <div className='column'>\n        <p>Revenue: {convertMoney(revenue)}</p>\n      </div>\n    </Content>\n  </Wrapper>\n);\nMovieInfoBar.propTypes = {\n  time: PropTypes.number,\n  budget: PropTypes.number,\n  revenue: PropTypes.number\n};\n\nexport default MovieInfoBar;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  color: var(--white);\n  background: var(--darkGrey);\n  border-radius: 20px;\n  padding: 5px;\n  text-align: center;\n\n  h3 {\n    margin: 10px 0 0 0;\n  }\n\n  p {\n    margin: 5px 0;\n  }\n`;\n\nexport const Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 200px;\n  object-fit: cover;\n  border-radius: 15px;\n`;\n","import react from 'react'\nimport PropTypes from 'prop-types';\nimport { Wrapper, Image } from './Actor.styles'\n\nconst Actor = ({ name, character, imageUrl }) => (\n  <Wrapper>\n    <Image src={imageUrl} alt='actor-thumbnails' />\n    <h3>{name}</h3>\n    <p>{character}</p>\n  </Wrapper>\n);\n\nActor.propTypes = {\n  name: PropTypes.string,\n  character: PropTypes.string,\n  imageUrl: PropTypes.string,\n}\n\nexport default Actor;","import React from 'react';\nimport { useParams } from 'react-router-dom';\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\n// Components\nimport BreadCrumb from './BreadCrumb';\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor'\n// Hook\nimport { useMovieFetch } from '../hooks/useMovieFetch';\n// Image\nimport NoImage from '../images/no_image.jpg';\n\nconst Movie = () => {\n  const { movieId } = useParams();\n\n  const { state: movie, loading, error } = useMovieFetch(movieId);\n\n  if (loading) return <Spinner />;\n  if (error) return <div>Something went wrong...</div>;\n\n  return (\n    <div>\n      <BreadCrumb movieTitle={movie.original_title} />\n      <MovieInfo movie={movie} />\n      <MovieInfoBar\n        time={movie.runtime}\n        budget={movie.budget}\n        revenue={movie.revenue}\n      />\n      <Grid header='Actors'>\n        {movie.actors.map(actor => (\n          <Actor\n            key={actor.credit_id}\n            name={actor.name}\n            character={actor.character}\n            imageUrl={\n              actor.profile_path\n                ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\n                : NoImage\n            }\n          />\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Movie;\n\n","import { useState, useEffect } from 'react';\nimport API from '../API';\nimport { currentState } from '../helpers';\nexport const useMovieFetch = movieId => {\n  const [state, setState] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        setError(false);\n        const movie = await API.fetchMovie(movieId);\n        const credits = await API.fetchCredits(movieId);\n        // Get directors only\n        const directors = credits.crew.filter(\n          member => member.job === 'Director'\n        );\n        setState({\n          ...movie,\n          actors: credits.cast,\n          directors\n        });\n        setLoading(false);\n      } catch (error) {\n        setError(true);\n      }\n    };\n\n    const sessionState = currentState(movieId);\n\n    if (sessionState) {\n      setState(sessionState);\n      setLoading(false);\n      return;\n    }\n\n    fetchMovie();\n  }, [movieId]);\n  \n  useEffect(() => {\n    sessionStorage.setItem(movieId, JSON.stringify(state));\n  }, [movieId, state]);\n\n  return { state, loading, error };\n};\n\n\n","import React from 'react'\nconst NotFound = () => <div>Not Found</div>;\n\nexport default NotFound;","import React from 'react';\n//Routing\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { GlobalStyle } from './GlobalStyle';\nimport Header from './components/Header'\nimport Home from './components/Header/Home'\nimport Movie from './components/Movie'\nimport NotFound from './components/NotFound'\n\nconst App = () => (\n  <Router>\n    <Header />\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"/:movieId\" element={<Movie />} />\n      <Route path=\"/*\" element={<NotFound />} />\n    </Routes>\n    <GlobalStyle />\n  </Router>\n);\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}